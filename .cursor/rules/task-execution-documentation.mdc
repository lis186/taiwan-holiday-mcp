---
description:
globs:
alwaysApply: false
---
# 任務執行後文件更新標準流程

## 核心原則

基於歷史執行模式，每次完成任務後必須按照以下順序更新相關文件：

## 標準執行流程

### 1. 任務完成後的必要文件更新

執行任務完成後，必須更新以下文件以反映實際狀況：

#### 主要文件更新順序

1. **[docs/dev-notes.md](mdc:docs/dev-notes.md)** - 記錄重大決策、遇到的問題和解決方法
2. **[docs/plan.md](mdc:docs/plan.md)** - 更新任務完成狀態和進度
3. **[docs/verification/stage-1-verification.md](mdc:docs/verification/stage-1-verification.md)** - 更新驗證結果和測試狀態

### 2. dev-notes.md 更新內容標準

根據歷史模式，必須包含：

```markdown
## Task X.X: [任務名稱] (完成日期)

### 重大技術決策
- 具體決策內容和理由
- 技術選型的考量因素
- 架構設計決定

### 遇到的問題及解決方案
- **問題現象**: 具體錯誤或問題描述
- **根本原因**: 深入分析問題成因
- **解決方案**: 具體解決步驟和代碼修改
- **學習心得**: 避免類似問題的經驗

### 品質指標達成情況
- 測試覆蓋率: X%
- 測試通過率: X/X
- 編譯狀態: 無錯誤/警告
- 其他品質指標
```

### 3. plan.md 更新標準

必須將完成的子任務標記為 ✅：

```markdown
- [x] T1.1.1: 具體子任務描述 ✅
- [x] T1.1.2: 另一個子任務描述 ✅
```

### 4. verification 文件更新標準

根據歷史模式，必須包含：

```markdown
## Task X.X: [任務名稱] ✅ (已完成於 YYYY-MM-DD)

### ✅ 實作完成項目
- 詳細的完成項目清單
- 技術實作細節
- 驗證結果

### 🔧 解決的問題
- 具體問題和解決方案記錄

### 📊 品質指標
- 測試結果統計
- 覆蓋率數據
- 效能指標
```

## 歷史執行模式分析

### 常見的更新要求格式

1. `完成後進行驗證，最後把重要決策、發生的錯誤和解決方法寫入 @dev-notes.md`
2. `驗證完成後把重大決定、遇到的問題和解決方式寫在 @dev-notes.md`
3. `都完成後，驗證部分的文件 @stage-1-verification.md 和@plan.md 內的進度要反應最後的狀況`

### 執行後的 Git 提交模式

- 總是在文件更新完成後執行 `commit`
- 如果忘記更新某些文件，會要求 `合併到前一次 commit`
- 使用 `git commit --amend --no-edit` 進行合併

## 自動化檢查清單

在任務完成後，確認以下項目：

- [ ] dev-notes.md 已更新重大決策和問題解決方案
- [ ] plan.md 中的任務狀態已標記為完成 ✅
- [ ] verification 文件已反映最新的驗證結果
- [ ] 所有變更已提交到 Git
- [ ] 如有遺漏，已合併到前一次 commit

## 提示詞最佳化建議

當要求執行任務時，建議使用以下格式：

```
@prompt-optimizer.mdc 實作 Task X.X，完成後驗證，驗證完成後把重大決定、遇到的問題和解決方式寫在 @dev-notes.md，並更新 @plan.md 和 @stage-1-verification.md 的進度狀況
```
